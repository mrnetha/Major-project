from django.contrib import admin
from django.apps import AppConfig

class AdminappConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'adminapp'
from django.db import models
from datetime import datetime

class QuestionModel(models.Model):
    question_id = models.AutoField(primary_key=True)
    question = models.CharField(max_length=10000, blank=False, null=False)
    answer = models.CharField(max_length=10000, null=True, blank=True)
    subject = models.CharField(max_length=100, blank=False, null=False)
    datetime_created = models.DateTimeField(default=datetime.now)

    class Meta:
        db_table = 'question_answer'

class SubjectModel(models.Model):
    subject_id = models.AutoField(primary_key=True)
    subject = models.CharField(max_length=100, blank=False, null=False)
    subject_image = models.FileField(upload_to='media', blank=False)
    datetime_created = models.DateTimeField(default=datetime.now)

    class Meta:
        db_table = 'subject_details'
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib import messages
from django.core.paginator import Paginator
from adminapp.models import *
from userapp.models import *

def admin_index(request):
    pend = UserdetailsModel.objects.filter(user_status="pending").count()
    all = UserdetailsModel.objects.all().count()
    ques = QuestionModel.objects.all().count()
    ans = AnswerModel.objects.all().count()
    return render(request, "admin/admin-index.html", {'ques': ques, 'all': all, 'ans': ans, 'pend': pend})

def admin_pending(request):
    pending = UserdetailsModel.objects.filter(user_status="pending")
    paginator = Paginator(pending, 5)
    page_no = request.GET.get('page')
    page = paginator.get_page(page_no)
    return render(request, "admin/admin-pending.html", {'pend': page})

def admin_all(request):
    all = UserdetailsModel.objects.all()
    paginator = Paginator(all, 5)
    page_no = request.GET.get('page')
    page = paginator.get_page(page_no)
    return render(request, "admin/admin-all.html", {'all': page})

def admin_add_subject(request):
    sub = SubjectModel.objects.all()
    if request.method == "POST" and request.FILES['photo']:
        subject = request.POST.get('subject')
        photo = request.FILES['photo']
        try:
            SubjectModel.objects.get(subject=subject.lower())
            messages.error(request, "This subject already exists, Try another subject")
            return redirect('admin_add_subject')
        except:
            SubjectModel.objects.create(subject=subject.lower(), subject_image=photo)
            messages.success(request, subject + " subject added successfully")
            return redirect('admin_add_subject')
    return render(request, "admin/admin-add-subject.html", {'sub': sub})

def admin_add_question(request):
    sub = SubjectModel.objects.all()
    if request.method == "POST":
        question = request.POST.get('question')
        answer = request.POST.get('answer')
        subject = request.POST.get('subject')
        if QuestionModel.objects.filter(subject=subject).count() <= 4:
            QuestionModel.objects.create(question=question, answer=answer, subject=subject)
            messages.success(request, "Question added successfully")
            return redirect('admin_add_question')
        else:
            messages.info(request, "Limit reached for question in " + subject + ", Remove some questions to add new question")
            return redirect('admin_add_question')
    return render(request, "admin/admin-add-question.html", {'sub': sub})

def admin_manage_question(request):
    ques = QuestionModel.objects.all()
    paginator = Paginator(ques, 5)
    page_no = request.GET.get('page')
    page = paginator.get_page(page_no)
    return render(request, "admin/admin-manage-question.html", {'ques': page})

def admin_results(request):
    result = AnswerModel.objects.all()
    paginator = Paginator(result, 5)
    page_no = request.GET.get('page')
    page = paginator.get_page(page_no)
    return render(request, "admin/admin-results.html", {'result': page})

def admin_analysis_graph(request):
    f = AnswerModel.objects.filter(grade='F').count()
    c = AnswerModel.objects.filter(grade='C').count()
    b = AnswerModel.objects.filter(grade='B').count()
    a = AnswerModel.objects.filter(grade='A').count()
    return render(request, "admin/admin-analysis-graph.html", {'a': a, 'b': b, 'c': c, 'f': f})

def accept_user(request, user_id):
    accept = get_object_or_404(UserdetailsModel, user_id=user_id)
    accept.user_status = "accepted"
    accept.save(update_fields=["user_status"])
    accept.save()
    if accept:
        messages.success(request, "User Added Successfully")
    return redirect('admin_pending')

def decline_user(request, user_id):
    decline = get_object_or_404(UserdetailsModel, user_id=user_id)
    decline.user_status = "declined"
    decline.save(update_fields=["user_status"])
    decline.save()
    if decline:
        messages.success(request, "Rejected Successfully")
    return redirect('admin_pending', user_id)

def remove_questions(request, question_id):
    remove = get_object_or_404(QuestionModel, question_id=question_id).delete()
    if remove:
        messages.success(request, "Question Removed Successfully")
    return redirect('admin_manage_question')

def remove_subject(request, subject_id):
    remove = get_object_or_404(SubjectModel, subject_id=subject_id).delete()
    if remove:
        messages.success(request, "Subject Removed Successfully")
    return redirect('admin_add_subject')
import os
from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'answer_evaluation.settings')
application = get_asgi_application()
from pathlib import Path
import os
from django.contrib import messages

BASE_DIR = Path(__file__).resolve().parent.parent
SECRET_KEY = 'your-secret-key'
DEBUG = True
ALLOWED_HOSTS = []

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'adminapp',
    'userapp',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'answer_evaluation.urls'
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'assets/templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'answer_evaluation.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'answer_evaluation',
        'HOST': 'localhost',
        'USER': 'root',
        'PASSWORD': 'Root',
        'PORT': '3306',
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True
STATIC_URL = 'static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'assets/static')]
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

MESSAGE_TAGS = {
    messages.DEBUG: 'alert-secondary',
    messages.INFO: 'alert-info',
    messages.WARNING: 'alert-warning',
    messages.SUCCESS: 'alert-success',
    messages.ERROR: 'alert-danger',
}
